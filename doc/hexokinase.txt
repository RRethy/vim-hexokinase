*hexokinase.txt*  (Neo)Vim plugin for asynchronously displaying the colour of
                hex codes, rgb(a)? functions, hsl(a)? functions, web
                colours, and custom patterns

Author:  Adam P. Regasz-Rethy (RRethy) <rethy.spud@gmail.com>
License: Same terms as Vim itself (see |license|)

INTRODUCTION                                                     *hexokinase*
===========================================================================

This plugin will display the colour which corresponds to text on the screen.

All scraping is done asynchronously via a Golang scraper.

It can show the colour of 6 digit hex codes, 3 digit hex codes, rgb functions,
rgba functions, hsl functions, hsla functions, web colours
(https://www.w3schools.com/colors/colors_names.asp), and even custom patterns,
see |g:Hexokinase_palettes| for more info on advanced pattern customization.

This means the following will display a beautiful rainbow (assuming all
patterns enabled):
>
    deeppink
    #f00
    oRaNgE
    rgb(255, 255, 0)
    rgba(0, 128, 0, 1)
    hsl(174,72.1%,56.5%)
    hsla(274.6,100%,25.5%, 1)
    #ee82ee

It can display the colour in many different ways, and can be customized to
display it any way you choose. Out of the box, colours can be displayed in the
sign column, as virtual text (only for Neovim), as the foreground colour for
the text (there are two different types of foreground colouring), or as the
background colour of the text (there are also two different types of
background colouring).

Note: |'termguicolors'| must be turned on and your terminal must support it.

COMMANDS                                                *hexokinase-commands*
===========================================================================

 ----------------------+-------------------------------------------------
 Command               | Description                                                                  ~
 ----------------------+-------------------------------------------------
  `HexokinaseToggle`     | Toggle the colouring
  `HexokinaseTurnOn`     | Turn on colouring (refresh if already turned on)
  `HexokinaseTurnOff`    | Turn off colouring
 ----------------------+-------------------------------------------------

CONFIGURATION                                      *hexokinase-configuration*
===========================================================================

Highlighters                                      *g:Hexokinase_highlighters*

                Type: |List| of |String|s
                How to display the colour.

                Default value:
                  Vim - sign_column to use |'signcolumn'|
                  Neovim - virtual text to use |nvim_buf_set_virtual_text()|

                Possible values: >
                  let g:Hexokinase_highlighters = [
                  \   'virtual',
                  \   'sign_column',
                  \   'background',
                  \   'backgroundfull',
                  \   'foreground',
                  \   'foregroundfull'
                  \ ]
<
                Any combination of them can be used, on top of custom
                highlighters.

                "virtual" will use Neovim's virtual text feature to display
                the colour. However, only one colour per line can be
                displayed. I personally use "virtual".

                "sign_column" will use the 'sign_column' to display the
                colour. However, only one colour per line can be displayed.

                "background" will highlight the background of certain
                characters, such as the parenthesis of various functions or
                the hash symbol for hex codes. For web colours it'll just
                highlight the whole background.

                "backgroundfull" will highlight the whole background of the
                appropriate text.

                "foreground" will act the same as "background", but as the
                name suggest, it'll highlight the foreground of the
                characters.

                "foregroundfull" will highlight the whole foreground of the
                appropriate text.

Custom Patterns via Palettes *g:Hexokinase_palettes*

                Type: |List| of |String|s
                Each string is a path to a file that can be used as a
                palette.
                A palette is a json file that looks like the following:
                >
                {
                    "regex_pattern": "foo[0-9]bar[0-9]baz[0-9]",
                    "colour_table": {
                        "foo1bar1baz1": "#eb00ff",
                        "foo2bar2baz2": "#ffeb00",
                        "foo3bar3baz3": "#00ffeb"
                    }
                }
<
                If the key "regex_pattern" exists in the top-level, then
                hexokinase will look for the regex pattern in the file. Upon
                finding a match, it will use the "colour_table" to translate
                the match into a hex code. False positives are ignored.

                If the key "regex_pattern" does not exist in the top-level.
                Each key in "colour_table" will be looked for. Omitting an
                overly complex "regex_pattern" will improve performance, but
                it's unlikely to produce a noticible difference.

                By using a palette, you can highlight variables which refer to
                colours in your code.

                Note: "regex_pattern" follows the regex syntax of Golang NOT
                Vimscript.

Patterns To Find *g:Hexokinase_optInPatterns*

                Type: |List| of |String|s
                      OR
                      Comma seperated |String| with no spaces
                Which patterns to look for.

                Default value: >
                let g:Hexokinase_optInPatterns = 'full_hex'
<

                Possible values: >
                let g:Hexokinase_optInPatterns = [
                \     'full_hex',
                \     'triple_hex',
                \     'rgb',
                \     'rgba',
                \     'hsl',
                \     'hsla',
                \     'colour_names'
                \ ]
<
                This option can be overriden by other configuration, this is
                the relevant precedence order:
                1. |g:Hexokinase_ftOptOutPatterns|
                2. |g:Hexokinase_ftOptInPatterns|
                3. |g:Hexokinase_optOutPatterns|
                4. |g:Hexokinase_optInPatterns|

Patterns To Ignore *g:Hexokinase_optOutPatterns*

                Type: |List| of |String|s
                      OR
                      Comma seperated |String| with no spaces
                Which patterns to ignore.

                Default value: >
                let g:Hexokinase_optInPatterns = ''
<

                Possible values: >
                let g:Hexokinase_optOutPatterns = [
                \     'full_hex',
                \     'triple_hex',
                \     'rgb',
                \     'rgba',
                \     'hsl',
                \     'hsla',
                \     'colour_names'
                \ ]
<
                This option can be overriden by other configuration, this is
                the relevant precedence order:
                1. |g:Hexokinase_ftOptOutPatterns|
                2. |g:Hexokinase_ftOptInPatterns|
                3. |g:Hexokinase_optOutPatterns|
                4. |g:Hexokinase_optInPatterns|

FileType Specific Patterns to Find *g:Hexokinase_ftOptInPatterns*

                Type: |Dict| of |String| to |List| of |String|s
                Which patterns to look for for specific filetypes.

                Default value: >
                let g:Hexokinase_ftOptOutPatterns = {
                \     'css': 'full_hex,rgb,rgba,hsl,hsla,colour_names',
                \     'html': 'full_hex,rgb,rgba,hsl,hsla,colour_names'
                \ }
<
                This option can be overriden by other configuration, this is
                the relevant precedence order:
                1. |g:Hexokinase_ftOptOutPatterns|
                2. |g:Hexokinase_ftOptInPatterns|
                3. |g:Hexokinase_optOutPatterns|
                4. |g:Hexokinase_optInPatterns|

FileType Specific Patterns to Ignore *g:Hexokinase_ftOptOutPatterns*

                Type: |Dict| of |String| to |List| of |String|s
                Which patterns to ignore for specific filetypes.

                Default value: >
                let g:Hexokinase_ftOptOutPatterns = {}
<
                This option can override other configuration, this is the
                relevant precedence order:
                1. |g:Hexokinase_ftOptOutPatterns|
                2. |g:Hexokinase_ftOptInPatterns|
                3. |g:Hexokinase_optOutPatterns|
                4. |g:Hexokinase_optInPatterns|

Virtual Text *g:Hexokinase_virtualText*

                Type: |String|
                The text to display when using virtual text to display the
                highlighting.

                Default value: >
                let g:Hexokinase_virtualText = '■'
<
                Note: Highlighting is done on the foreground of what is passed
                so spaces will not work, instead use "█".

Sign Column Icon *g:Hexokinase_signIcon*

                Type: |String|
                The text to display when using the |sign_column|.

                Default value: >
                let g:Hexokinase_signIcon = '■'
<
                Note: Can only be one or two characters long.

Refresh Events *g:Hexokinase_refeshEvents*

                Type: |List| of |String|s
                Which |autocmd-events| trigger a refresh of highlighting.

                Default value: >
                let g:Hexokinase_refeshEvents = ['BufWrite', 'BufCreate'] " TODO
<
                Since the scraping is done asynchronously and no more than a
                single scraping job is started per buffer, you can use more
                aggressive |autocmd-events|. For live updating you could use
                ['TextChanged', 'InsertLeave']. Although, similarly to
                vim-ale, this can slow down macros since those autocmds will
                be triggered in quick succession.

Disabled FileTypes *g:Hexokinase_ftDisabled*

TODO

                Type: |List| of |String|s
                Which FileTypes not to scrape.

                Default value: >
                    let g:Hexokinase_ftDisabled = []
<
                This will override |g:Hexokinase_ftEnabled|.

                You can pass "*" to disable for all FileTypes.

Enabled FileTypes *g:Hexokinase_ftEnabled*

TODO

                Type: |List| of |String|s
                Which FileTypes to scrape automatically.

                Default value: >
                let g:Hexokinase_ftEnabled = ['text', 'css', 'html', 'markdown', 'xml']
<
                This will be overriden by |g:Hexokinase_ftEnabled|.

                You can pass "*" to disable for all FileTypes.

CREATE HIGHLIGHTERS                                 *hexokinase-highlighters*
===========================================================================

To create a custom highlighter you need to create two functions with the
following signatures (the name doesn't matter since it gets passed as a
function reference below):

highlight_callback({bufnr}, {lnum}, {hex}, {hl_name}, {start}, {end})
                                              *hexokinase-highlight_callback*

                Note: {bufnr} param is new and did not exist in v1. Existing
                callbacks must be changed.

                {bufnr} is the buffer number of the buffer that was scraped.
                The currently active buffer may be different since scraping is
                done asynchronously.

                {lnum} is an Integer while the line number of the colour
                (indexed at 1), {lnum} may repeat if multiple matches are
                found on the same line.

                {start} and {end} are the start and
                end (respectively) of the matched colour. {start} is indexed
                at 1 since it represents the column.

                {hex} is the hex for the matched colour.

                {hl_name} is the name of the highlight group
                that was defined for the highlighting. By default, the
                auto-generated highlight group will only set the value for
                |highlight-guifg| and |highlight-ctermfg|, if you want the
                background to change then you need to create your own
                highlight group using {hex}.

                This will get triggered when a match is found and would be
                responsible for doing the work to display the match.

                This gets setup using the following: >
                  let g:Hexokinase_highlightCallbacks = [
                  \     function('highlight_callback')
                  \ ]

teardown_callback({bufnr})
                                               *hexokinase-teardown_callback*

                Note: {bufnr} param is new and did not exist in v1. Existing
                callbacks must be changed.

                {bufnr} is the buffer number of the buffer that was scraped.
                The currently active buffer may be different than {bufnr} so
                don't rely on "bufnr('%')".

                This will get triggered when the highlighting is turned off by
                the user or when it is refreshed for a buffer. This would be
                the time to revert any UI changes that were made in
                |hexokinase-highlight_callback|. When being refreshed, the
                entire buffer is scraped before the callback is triggerred.

                This gets setup using the following: >
                  let g:Hexokinase_tearDownCallbacks = [
                  \     function('teardown_callback')
                  \ ]

FAQ                                                         *hexokinase-faq*
===========================================================================

Q: I'm seeing grey colours when I toggle vim-hexokinase

A: You need `termguicolors` to be turned on. Verify `:set termguicolors?`
outputs `1`.

vim:tw=78:ts=8:ft=help:norl:
